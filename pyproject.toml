[project]
name = "command-line-assistant"
version = "0.4.2"
description = "A simple wrapper to interact with RAG"
authors = [
    { name = "RHEL Lightspeed Team", email = "rhel-sst-lightspeed@redhat.com" },
]
maintainers = [
    { name = "Rodolfo Olivieri", email = "rolivier@redhat.com" },
    { name = "Major Hayden", email = "mhayden@redhat.com" },
]
dependencies = [
    # tomli is only required below 3.11 as it is native after that version.
    'tomli; python_version<"3.11"',
    "requests==2.25.1",
    "dasbus==1.5;python_version<='3.9'",
    "dasbus==1.7;python_version>='3.12'",
    "sqlalchemy==1.4.45",
    "pygobject~=3.40;python_version<='3.9'",
    "pygobject~=3.46;python_version>='3.12'",
    "markdown<3.4",
]
requires-python = ">=3.9,<4.0" # RHEL 9 and 10
readme = "README.md"
license = { file = "LICENSE" }
classifiers = ["Programming Language :: Python :: 3"]
urls = { Repository = "https://github.com/rhel-lightspeed/command-line-assistant.git", Issues = "https://github.com/rhel-lightspeed/command-line-assistant/issues" }
scripts = { c = "command_line_assistant.client:main", clad = "command_line_assistant.daemon.clad:daemonize" }

[build-system]
# uv build is not available in rhel baseos repositories
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "pytest-randomly",
    "coverage",
    "pytest-sugar",
    "pytest-clarity",
    "tox",
    "responses",
    "types-markdown<3.4",
]
docs = [
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-rtd-theme",
    "sphinx-argparse-cli",
]
db = ["psycopg2_binary", "mysqlclient"]

[tool.setuptools.packages.find]
include = ["command_line_assistant*"]
namespaces = false

[tool.ruff]
# Enable ruff rules to act like flake8
#   https://docs.astral.sh/ruff/rules/#rules
lint.select = [
    "E",   # pycodestyle (formerly part of flake8)
    "F",   # pyflakes (formerly part of flake8)
    "I",   # import order (like isort)
    "B",   # flake8-bugbear
    "C90", # flake8-comprehensions
    "G",   # flak8-logging-format
]

# Exclude specific rules if needed
lint.ignore = [
    "E501", # Ignore line length (similar to flake8's max-line-length)
]

[tool.pytest.init_options]
testpaths = ["tests"]

[tool.coverage.report]
skip_empty = true
exclude_also = ["if __name__ == \"__main__\":"]

[tool.coverage.run]
branch = true
source = ["command_line_assistant"]

[tool.codespell]
skip = 'data/release/man/*,data/release/selinux/Makefile'
count = true
